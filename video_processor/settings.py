"""
Django settings for video_processor project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^(im&go7&r+jwsfk+$dsj7d8hf5#5q!(b94!xspb5r(n0qk$4g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     'videos',
    'django_celery_results',  # for celery results backend
    'django_celery_beat',     # for periodic tasks if needed
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'video_processor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/"template"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'video_processor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

#  Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'videodb', 
        'USER': 'root',  
        'PASSWORD': 'mypassword', 
        'HOST': 'localhost', 
        'PORT': '5432', 
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'


USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media/'

# Celery configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'django-db'

# settings.py

CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Or your broker URL
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Or your result backend URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
import logging

CELERYD_HIJACK_ROOT_LOGGER = False
# # logging.basicConfig(level=logging.DEBUG)
# import os

# # Define paths for log files
# TASK_LOG_FILE_PATH = os.path.join('logs', 'tasks.log')

# # Ensure the directory exists
# log_dir = os.path.dirname(TASK_LOG_FILE_PATH)
# if not os.path.exists(log_dir):
#     os.makedirs(log_dir)

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': True,  # Disable all existing loggers
#     'handlers': {
#         'task_file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': TASK_LOG_FILE_PATH,
#         },
#     },
#     'loggers': {
#         'tasks': {
#             'handlers': ['task_file'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#     },
# }
